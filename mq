#!/bin/bash
#
################################################################################
#
#      Copyright (C) 2017 Josh Sunnex (jsunnex@gmail.com)
#
#  This program is dual-licensed; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This Program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this file; see the file COPYING.  If not, see
#  <http://www.gnu.org/licenses/>.
#
################################################################################


######################
##
#       TODO:
#
#   - Add individual command help functions
#   - Add individual command bash complete function (if possible - probably not worth the effort)
#
##
######################

VERSION=1.0.11


# bash complete functions
function __mq_get_commands_list {
    re='(?<=mq_)([a-z]+)(?=\()';
    commands=$(cat ${BASH_SOURCE[0]} | grep -o -P ${re});
    echo ${commands};
}

function __mq_get_extension_list {
    extensions="";
    script_dir="$( readlink -f "${BASH_SOURCE[0]}")";
    script_dir=${script_dir%/mq};
    extensions_dir=${script_dir}/extensions
    for item in ${extensions_dir}/*.py; do 
        item=$(basename $(echo $item | sed 's/\.py$//') ); 
        extensions="${extensions} ${item}"
    done
    echo ${extensions};
}

function __mq_bash_auto_complete {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="$(__mq_get_commands_list) $(__mq_get_extension_list)";

    if [[ ${cur} == [a-z]* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) );
        return 0;
    fi

    if [[ ${prev} && ${prev} != "mq" ]] ; then
        # Complete file paths for these options
        if [ ${prev} == "import" ] || [ ${prev} == "export" ] ; then
            # Unescape space
            cur=${cur//\\ / }
            # Expand tilder to $HOME
            [[ ${cur} == "~/"* ]] && cur=${cur/\~/$HOME}
            # Show completion if path exist (and escape spaces)
            compopt -o filenames
            local files=("${cur}"*)
            [[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]// /\ }" )
            return 0
        fi
        # For now we don't need to support options
        return 0;
    fi
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) );
}
if [[ $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) == "/etc/bash_completion.d" ]]; then
    # Read this file as bash auto completion
    complete -F __mq_bash_auto_complete mq;
    return 0;
fi

# install/update/uninstall functions:
function install_python {
    echo "###########################################";
    echo "##     Updating python requirements      ##";
    echo "###########################################";
    DIR="$( cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}")" )" && pwd )";
    sudo -H python3 -m pip install -r ${DIR}/extensions/requirements.txt;
    echo
}
function uninstall_link {
    echo "###########################################";
    echo "##          Uninstalling mq-cli          ##";
    echo "###########################################";
    sudo rm -fv /usr/bin/mq;
    sudo rm -fv /usr/local/bin/mq;
    sudo rm -fv /etc/bash_completion.d/mq;
    echo;
}
function install_link {
    echo "###########################################";
    echo "##           Installing mq-cli           ##";
    echo "###########################################";
    DIR="$( cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}")" )" && pwd )";
    chmod +x ${DIR}/mq;
    sudo rm -f /usr/local/bin/mq;
    sudo rm -f /etc/bash_completion.d/mq;
    sudo ln -sv ${DIR}/mq /usr/local/bin/mq;
    sudo ln -sv /usr/local/bin/mq /etc/bash_completion.d/mq;
    echo;
    install_python;
    echo;
}
function update {
    echo "##########################################";
    echo "##        Pull in latest changes        ##";
    echo "##########################################";
    DIR="$( cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}")" )" && pwd )";
    CWD=$PWD;
    cd ${DIR};
    git pull origin master;
    echo;
    install_python;
    cd ${CWD};
    echo;
}
function install {
    if [ "$1" == "--install" ]; then
        install_link
    elif [ "$1" == "--update" ]; then
        update
    elif [ "$1" == "--uninstall" ]; then
        uninstall_link
    fi
}

# mq-cli functions
function command_extension_exists {
    script_dir="$( readlink -f "${BASH_SOURCE[0]}")";
    script_dir=${script_dir%/mq};
    extensions_dir=${script_dir}/extensions
    if [[ ! -f ${extensions_dir}/${1}.py ]]; then
        return 1;
    fi
    echo ${extensions_dir}/${1}.py ${@:2};
}

function command_exists {
    cat "${BASH_SOURCE[0]}" | grep "mq_${1}()" > /dev/null;
    result=$?
    if [[ $result -ne 0 ]]; then
        fuzzy_match_string=$(cat "${BASH_SOURCE[0]}" | grep "mq_${1}")
        fuzzy_match_string=${fuzzy_match_string%()*}
        fuzzy_match_string=${fuzzy_match_string#mq_}
        if [[ -z "${fuzzy_match_string// }" ]]; then
            cmd=$(command_extension_exists ${@});
            if [[ ! ${cmd} ]]; then
                return 1;
            else
                echo ${cmd};
            fi
        else
            echo mq_${fuzzy_match_string} ${@};
        fi
    else
        echo mq_${1} ${@};
    fi
}

function working_project {
    remote=$(hg paths)
    remote=${remote[0]}
    remote=${remote%/}
    remote=${remote##*/}
    echo ${remote}
}

function project_root {
    root_dir=$(hg root);
    echo ${root_dir};
}

function project_patch_dir {
    patch_dir=$(project_root)/.hg/patches;
    echo ${patch_dir};
}

function read_command_help {
    re='(?<=#--)(.*?)$';
    message=$(cat ${BASH_SOURCE[0]} | grep "mq_${1}()" | grep -o -P ${re});
    echo ${message};
}

function print_extension_help {
    script_dir="$( readlink -f "${BASH_SOURCE[0]}")";
    script_dir=${script_dir%/mq};
    extensions_dir=${script_dir}/extensions
    ${extensions_dir}/${1}.py help;
}

function indent {
    sed 's/^/    /'; 
}

function main_usage {
    echo -n "mq [COMMAND/EXTENSION] [OPTIONS]

    list of commands:
    "
    echo 
    for command in $(__mq_get_commands_list); do
        help_message=$(read_command_help ${command});
        ((spaces = 15 - ${#command}));
        white_space=$(printf %${spaces}s);
        echo "        ${command}" "${white_space}" "${help_message}";
    done
    echo -n "
    list of extensions:
    "
    echo 
    for command in $(__mq_get_extension_list); do
        print_extension_help ${command};
    done
    echo
}

function check_hg_repo {
    project=$(working_project);
    if [[ ! ${project} ]]; then
        echo "abort: no repository found in '${PWD}' (.hg not found)!"
        exit 1
    fi
}

function wiggle_rejects {
    WIGGLE=$(which wiggle)
    if [[ ! -z ${WIGGLE} ]]; then
        rej_file=${1:-$(tr -d '\0' </dev/stdin)};
        orig_file=${rej_file%.rej}
        echo "Found reject file ${rej_file} ${orig_file}";
        ${WIGGLE} "${orig_file}" "${rej_file}" > "${orig_file}.wiggle"
        if [[ -f "${orig_file}.wiggle" ]]; then
            echo "Resolve unresolved conflicts in mergetool..."
            meld "${orig_file}" "${orig_file}.wiggle"
        fi
        rm -f "${orig_file}.wiggle"
        mv "${rej_file}" "${rej_file}.merged"
    else
        echo "You need to install the wiggle tool."
        echo "Try running 'sudo apt install wiggle'. Then run this command again"
        echo 
        exit 1;
    fi
}

function check_uncommitted_changes {
    # Check if there are uncommitted changes and warn user
    if [[ $(hg diff) ]]; then
        if [[ "${1}" == "required" ]]; then
            echo "There are uncommitted changes in your working branch. You need to commit these before running this command."
            exit 1;
        fi
        echo "There are uncommitted changes in your working branch:"
        hg status
        echo
        read -p "Would you like to commit these first? (y/n) " AN
        if [[ "${AN}" != "N" && "${AN}" != "n" ]]; then
            echo "abort: commit changes before retrying your command."
            exit 0;
        fi
    fi
}

function rebase_patch {
    if [[ $(hg qseries) ]]; then
        applied_patch=$(hg qseries);
        applied_patch=${applied_patch[0]};
        applied_patch_path="$(project_patch_dir)/${applied_patch}";
        pull=0;
        rebase=0;
        prompt=1;
        action=rebasing
        for arg in $@; do
            if [[ "${arg}" == "--pull" ]]; then
                pull=1;
            fi
            if [[ "${arg}" == "--rebase" ]]; then
                rebase=1;
                prompt=0;
            fi
            if [[ "${arg}" == "--finish" ]]; then
                action=finishing
            fi
        done
        if [[ ${pull} == 0 ]]; then
            echo
            echo "- STEP HELP:"
            echo "    Sometimes it is best if you refresh your patch with the latest changes before you continue ${action}."
            echo "    This is done by carrying out an hg pull and update first."
            echo
            echo "    NOTE:"
            echo "    Your patch will be unaffected during this step as it will be temporarily removed to avoid merge conflicts."
            echo
            read -p "Would you like to carried out an 'hg pull' and 'hg update' before ${action} this patch? (y/n) " AN
            if [[ "${AN}" == "Y" || "${AN}" == "y" ]]; then
                pull=1;
            fi
        fi
        if [[ ${pull} == 1 ]]; then
            if [[ $(hg qapplied) ]]; then
                hg qpop -a -f 2> /dev/null;
            fi
            hg pull;
            hg update;
        fi
        if [[ ${rebase} == 0 ]]; then
            echo
            echo "- STEP HELP:"
            echo "    When we are working with patches we need to be careful of hg pull."
            echo "    We can either pop the current patch and pull. This is the simplest option if you know there are no conflicts."
            echo "    The other option is to rebase when we pull and then attempt to merge any conflicts using your configured mergetool."
            echo "    Not choosing rebase will generate '.rej' files in your working tree for you to manually resolve."
            echo
            echo "    NOTE:"
            echo "    If you choose to rebase, you will be given the option to review your patch again after this step."
            echo
            read -p "Would you like mq to rebase when we pull in order to solve merge conflicts? (y/n) " AN
            if [[ "${AN}" == "Y" || "${AN}" == "y" ]]; then
                rebase=1;
            fi
        fi
        if [[ ${rebase} == 1 ]]; then
            # Patch may not be applied at this point. Lets make sure it is removed for consistency 
            if [[ $(hg qapplied) ]]; then
                hg qpop -a -f 2> /dev/null;
            fi
            qparent=$(grep '# Parent ' ${applied_patch_path} | awk '{print $3}');
            tip=$(hg id -r tip -i);
            hg update -r ${qparent}
            hg qpush ${applied_patch};
            qtip=$(hg id -r qtip -i);
            hg rebase -s ${qtip} -d ${tip};
            hg qrefresh;
        fi
        if [[ $(hg qseries) ]]; then
            if [[ ${prompt} == 1 ]]; then # Only show this prompt if it was called using the other prompts
                echo
                read -p "Would you like to review your patch again now that you have carried out a pull and update? (y/n) " AN
                if [[ "${AN}" == "Y" || "${AN}" == "y" ]]; then
                    exit 0;
                fi
            fi
        else
            echo
            echo "Your patch has been removed as there are no longer any changes for it to track after the rebase."
            read -p "Would you like to recreate a blank patch with the same name? (y/n) " AN
            if [[ "${AN}" == "Y" || "${AN}" == "y" ]]; then
                hg qnew ${applied_patch} --git --currentuser;
            fi
        fi
    fi
}

######################
##
#       CONFIG:
#
MQ_HOME="${HOME}/.mq"
HG_USERNAME=$(hg config ui.username);
HG_EDITOR=$(hg config ui.editor);
HG_EDITOR=${HG_EDITOR:-'nano $FILE'}
PATCH_NAMING=$(eval echo $(hg config mq.patch_naming));
PATCH_NAMING=${PATCH_NAMING:-%s}
PATCH_DIR=$(eval echo $(hg config mq.patch_dir));
PATCH_DIR=${PATCH_DIR:-${MQ_HOME}/patches}
EXPORT_DIR=$(eval echo $(hg config mq.export_dir));

CHEAD="\e[93m";
CPATCH="\e[92m";
CLBLUE="\e[94m";
CLMAG="\e[95m";
CLRED="\e[91m";
CLGREEN="\e[92m";
CMODIFIED="\e[1;94m"; # M Light Blue (bold)
CUNTRACKED="\e[1;4;95m"; # ? Light Mag (bold underlined)
CMISSING="\e[1;4;36m"; # ! Cyan (bold underlined)
CREMOVED="\e[1;91m"; # R Light Red (bold)
CADDED="\e[1;92m"; # A Light Green (bold)
CNORM="\e[0m";
#
##
######################

mq_apply() { #-- Apply a patch to your working branch.
    check_hg_repo
    conf_array='';
    # First check if current try has uncommitted changes (cannot apply without committing changes first)
    check_uncommitted_changes required
    # Check if there is already a patch applied
    if [[ $(hg qseries) ]]; then
        applied_patch=$(hg qseries);
        applied_patch=${applied_patch[0]};
        echo "${applied_patch} is already a patch applied to your working branch."
        exit 1
    else # no patches currently applied
        project=$(working_project)
        if [[ ${2} && "${2}" != "--list" ]]; then
            name=${2};
            selected_patch=$(printf "${PATCH_NAMING}" "${name}")_${project};
            if [[ -f "${PATCH_DIR}/${selected_patch}" ]]; then
                echo "Setting current patch to ${selected_patch} in working branch...";
            else
                echo "No patch was found matching ${selected_patch}."; echo "No patch applied.";
            fi
        else
            # List all patches
            echo
            i=1
            k=0
            for file in ${PATCH_DIR}/*
            do
                if [[ -f $file ]]; then
                    patch_name=${file##*/};
                    patch_project=${file##*_};
                    if [[ "${patch_project}" != "${project}" ]]; then # Ignore all patches not named for this project
                        continue;
                    fi
                    echo "      ${i}) ${patch_name}";
                    conf_array[ $k ]="${patch_name}" 
                fi
                ((i++))
                ((k++))
            done
            if [[ ${conf_array} ]]; then # Only show if list not empty
                echo
                read -p "Select a patch from the list above: " menu
                numbers='^[0-9]+$'
                if [[ "${menu}" -le "${#conf_array[@]}" && ${menu} =~ ${numbers} && "${menu}" != "0" ]]; then
                    (( menu-- ))
                    selected_patch=${conf_array[${menu}]}
                    echo; echo "Setting current patch to ${selected_patch} in working branch...";
                else
                    echo; echo "That was not a valid selection."; echo "No patch applied.";
                    exit 1
                fi
            else
                echo "No patches were found for your current project ${project}."; echo "No patch applied.";
            fi
        fi
        patch_path=${PATCH_DIR}/${selected_patch};
        hg qimport ${patch_path} 2> /dev/null;
        hg qpush ${selected_patch};
    fi
}

mq_clear() { #-- Wipe the current patch from your working branch. Warning! All non-exported changes will be lost.
    check_hg_repo
    echo "WARNING!! This command will completely clear you patch queue. There is no coming back from this."
    echo 
    read  -p "If you wish to continue, type the word 'YES' in caps:  " AN
    if [[ "${AN}" == "YES" ]]; then
        hg qpop -a -f 2> /dev/null;
        for patch in $(hg qseries) 
        do
            hg qdelete ${patch};
        done
        rm -rf $(project_patch_dir)/*;
    fi
    if [[ $(hg status -n | grep -e .orig -e .rej) ]]; then
        echo "Found leftover uncontrolled files:"
        echo  -ne "${CUNTRACKED}\n"
        hg status -n | grep -e .orig -e .rej;
        echo -ne "${CNORM}\n"
        read -p "Would you like to also remove these? (y/n) " AN
        if [[ "${AN}" == "Y" || "${AN}" == "y" ]]; then
            rm -f $(hg status -n | grep -e .orig -e .rej);
        fi
    fi
}

mq_commit() { #-- Commit the specified files or all outstanding changes. Use option '--refresh' or '-r' to prevent updating user information
    check_hg_repo;
    ARGS="";
    ARG_EDIT="-e";
    ARG_USER="-U";
    ARG_DATE="-D";
    for arg in ${@:2}; do
        if [[ "${arg}" == "--refresh" || "${arg}" == "-r" ]]; then
            ARG_EDIT="";
            ARG_USER="";
            ARG_DATE="";
            continue;
        fi
        ARGS="${ARGS} ${arg}";
    done
    ARGS="${ARG_EDIT} ${ARG_USER} ${ARG_DATE} ${ARGS}"
    hg qrefresh ${ARGS};
}

mq_diff() { #-- Diff repository (or selected files).
    check_hg_repo
    hg qdiff ${@:2} -p -U 8;
}

mq_export() { #-- Generate a local output of a patch to a specified directory.
    check_hg_repo
    if [[ ${2} ]]; then
        export_dir=${2%/};
    elif [[ ${EXPORT_DIR} ]]; then
        export_dir=${EXPORT_DIR%/};
    else # User needs to provide an output folder
        echo "mq export ([LOCATION])"
        echo 
        echo "    No location specified or configured."
        echo "    You can configure a default location in .hgrc with 'export_dir'"
        echo 
        exit 1
    fi
    # Check if there is already a patch applied
    if [[ $(hg qseries) ]]; then
        applied_patch=$(hg qseries);
        selected_patch=${applied_patch[0]};
        patch_path=$(project_patch_dir)/${selected_patch};
        echo "selecting applied patch ${selected_patch} from your current project...";
        echo
        # First check if there are uncommitted changes and warn user
        check_uncommitted_changes
    fi
    if [[ ! ${selected_patch} ]]; then
        # List all patches
        echo
        i=1
        k=0
        for file in ${PATCH_DIR}/*
        do
            if [[ -f $file ]]; then
                patch_name=${file##*/};
                patch_project=${file##*_};
                if [[ "${patch_project}" != "${project}" ]]; then # Ignore all patches not named for this project
                    continue;
                fi
                echo "      ${i}) ${patch_name}";
                conf_array[ $k ]="${patch_name}" 
            fi
            ((i++))
            ((k++))
        done
        if [[ ${conf_array} ]]; then # Only show if list not empty
            echo
            read -p "Select a patch from the list above: " menu
            numbers='^[0-9]+$'
            if [[ "${menu}" -le "${#conf_array[@]}" && ${menu} =~ ${numbers} && "${menu}" != "0" ]]; then
                (( menu-- ))
                selected_patch=${conf_array[${menu}]};
                patch_path=${PATCH_DIR}/${selected_patch};
                echo; echo "Exporting patch ${selected_patch}...";
            else
                echo; echo "That was not a valid selection."; echo "No patch selected.";
                exit 1
            fi
        else
            echo "No patches were found for your current project ${project}.";
        fi
    fi
    if [[ ${selected_patch} ]]; then
        # TODO: check if patch already exists
        cp $patch_path ${export_dir}/${selected_patch}.patch;
        status=$?;
        if [[ $status == 0 ]]; then
            echo "Patch successfully exported to ${export_dir}/${selected_patch}.patch";
        else
            echo "Failed to export patch. Nothing done."
        fi
    fi
}

mq_finish() { #-- Move applied patches into repository history.
    check_hg_repo
    # First check if there are uncommitted changes and warn user
    check_uncommitted_changes
    if [[ $(hg qseries) ]]; then
        hg_branch=$(hg id -b);
        applied_patch=$(hg qseries);
        applied_patch=${applied_patch[0]};
        applied_patch_path="$(project_patch_dir)/${applied_patch}";
        echo -n "Finishing patch
        Current branch:     ${hg_branch}
        Applied patch:      ${applied_patch}
        ";
        echo
        pull=0;
        rebase=0;
        for arg in $@; do
            if [[ "${arg}" == "--pull" ]]; then
                pull=1;
            fi
            if [[ "${arg}" == "--rebase" ]]; then
                rebase=1;
            fi
        done
        if [[ ${pull} == 0 ]]; then
            echo
            echo "- STEP HELP:"
            echo "    Sometimes it is best if you refresh your patch with the latest changes before finishing it."
            echo "    This is done by carrying out an hg pull and update first."
            echo
            echo "    NOTE:"
            echo "    If you choose to pull and update, you will be given the option to review your patch again after this step."
            echo
            read -p "Would you like to carry out an 'hg pull' and 'hg update' before finishing this patch? (y/n) " AN
            if [[ "${AN}" == "Y" || "${AN}" == "y" ]]; then
                pull=1;
                if [[ ${rebase} == 0 ]]; then
                    echo
                    echo "- STEP HELP:"
                    echo "    When we are working with patches we need to be careful of hg pull."
                    echo "    We can either pop the current patch and pull. This is the simplest option if you know there are no conflicts."
                    echo "    The other option is to rebase when we pull and then attempt to merge any conflicts using your configured mergetool."
                    echo "    Not choosing rebase will generate '.rej' files in your working tree for you to manually resolve."
                    echo
                    read -p "Would you like mq to rebase when we pull in order to solve merge conflicts? (y/n) " AN
                    if [[ "${AN}" == "Y" || "${AN}" == "y" ]]; then
                        rebase=1;
                    fi
                fi
            fi
        fi
        if [[ ${pull} == 1 ]]; then
            if [[ ${rebase} == 1 ]]; then
                hg pull --rebase;
                hg update
            else
                hg qpop -a -f 2> /dev/null;
                hg pull
                hg update
                hg qpush ${applied_patch};
            fi
            hg qrefresh
            echo
            read -p "Would you like to review your patch again now that you have carried out a pull and update? (y/n) " AN
            if [[ "${AN}" == "Y" || "${AN}" == "y" ]]; then
                exit 0;
            fi
        fi
        hg qfinish ${applied_patch}
    else
        echo "no patches applied"
    fi
}

mq_import() { #-- Import a patch into this project.
    apply=0;
    for arg in $@
    do
        if [[ "${arg}" == "import" ]]; then
            continue;
        fi
        if [[ "${arg}" == "-a" ]]; then
            apply=1;
            continue;
        fi
        if [[ "${arg}" =~ "--name" ]]; then
            name=$(echo ${arg} | awk -F'=' '{print $2}');
            continue;
        fi
        src=$arg;
    done
    if [[ ! -f ${src} ]]; then 
        echo "Failed to import '${src}'";
        echo "File does not exist. Please ensure you have specified the correct location.";
        echo
        exit 1
    fi
    # Import the patch
    if [[ ! ${name} ]]; then
        echo
        read -p "Provide a name for this patch: " name
    fi
    project=$(working_project);
    selected_patch=$(printf "${PATCH_NAMING}" "${name}")_${project};
    echo "Patch will be named '${selected_patch}'...";
    patch_path=${PATCH_DIR}/${selected_patch};
    if [[ -s ${patch_path} ]]; then  # patch with this name already exists...
        echo
        echo "A patch with this name already exists."
        read -p "Do you wish to overwrite it? (y/n) " AN
        if [[ "${AN}" != "Y" && "${AN}" != "y" ]]; then
            echo 
            echo "Patch not imported."
            exit 0;
        fi
    fi
    cp -f ${src} ${patch_path}
    status=$?;
    echo
    if [[ $status == 0 ]]; then
        echo "Patch successfully imported";
    else
        echo "Failed to import patch."
    fi
    if [[ $apply == 1 ]]; then 
        echo 
        echo "Apply patch to working branch..."
        echo
        mq_apply
    fi
}

mq_list() { #-- Show a list of patches in the patch cache pool.
    check_hg_repo
    project=$(working_project)
    # List all patches
    echo -ne "
    list of available patches:
    (a patch with a '${CLGREEN}*${CNORM}' denotes the currently applied patch)
    "
    echo 
    applied_patch=$(hg qseries);
    applied_patch=${applied_patch[0]};
    for file in ${PATCH_DIR}/*
    do
        if [[ -f $file ]]; then
            patch_name=${file##*/};
            patch_project=${file##*_};
            if [[ "${patch_project}" != "${project}" ]]; then # Ignore all patches not named for this project
                continue;
            fi
            applied=' ';
            if [[ "${applied_patch}" == "${patch_name}" ]]; then
                applied="${CLGREEN}*"
            fi
            echo -e "     ${applied} ${patch_name}${CNORM}";
        fi
    done
    echo
}

mq_new() { #-- Generate new patch for current working branch.
    check_hg_repo
    if [[ -s $(project_patch_dir)/series ]]; then 
        echo "abort: and active patch already exists"; 
        exit 1
    fi
    if [[ -s $(project_patch_dir)/status ]]; then 
        echo "abort: and active patch already exists"; 
        exit 1
    fi
    if [[ ! ${2} ]]; then
        echo "abort: no name specified";
        echo
        echo "Usage: mq new [NAME]";
        echo
        exit 1
    fi
    project=$(working_project)
    name=$(printf "${PATCH_NAMING}" "${2}")_${project};
    hg qnew ${name} ${@:3} --git --currentuser;
}

mq_pop() { #-- Pops the current patch off the working branch and into out patch cache pool.
    check_hg_repo
    # pop off current patch to mq PATCH_DIR
    # First check if there are uncommitted changes and warn user
    check_uncommitted_changes
    if [[ $(hg qseries) ]]; then
        applied_patch=$(hg qseries);
        applied_patch=${applied_patch[0]};
        applied_patch_path="$(project_patch_dir)/${applied_patch}";
        echo "Moving patch ${applied_patch_path} >> ${PATCH_DIR}/${applied_patch}";
        cp -f ${applied_patch_path} ${PATCH_DIR}/;
        status=$?;
        if [[ $status == 0 && -s ${PATCH_DIR}/${applied_patch} ]]; then # Ensure patch was copied correctly before removing from working tree
            hg qpop -a -f 2> /dev/null;
            for patch in $(hg qseries) 
            do
                hg qdelete ${patch};
            done
        fi
    else
        echo "no patches applied"
    fi
}

mq_rebase() { #-- Rebase your patch to sit above the current branch tip.
    check_hg_repo
    # First check if there are uncommitted changes and warn user
    check_uncommitted_changes
    rebase_patch --rebase
}

mq_status() { #-- Show any patches currently applied to your working branch and show changed files in the working directory.
    check_hg_repo
    hg_branch=$(hg id -b);
    hq_qseries=$(hg qseries);
    hg_status=$(hg status);
    # Get diff stats
    selected_patch=${hq_qseries[0]};
    patch_path=$(project_patch_dir)/${selected_patch};
    current_patch_stats="";
    if [[ -f ${patch_path} ]]; then
        while read -r line; do
            current_patch_stats="${current_patch_stats}
                        ${line}"
        done <<< "$(hg qdiff | diffstat)"
    fi
    HG_FILES_CHANGED="";
    HG_FILES_CHANGED_HELP="  The codes used to show the status of files are:

    M = modified
    A = added
    R = removed
    C = clean
    ! = missing (deleted by non-hg command, but still tracked)
    ? = not tracked
    I = ignored
      = origin of the previous file (with --copies)";

    if [[ ! $(hg status -n) ]]; then
        HG_STATUS="
                        0 files changed
        ";
    else
        while read -r line; do
            #line="\e[1;4m${line}"
            [[ "$line" == "A"* ]] && line="${CADDED}${line}";
            [[ "$line" == "R"* ]] && line="${CREMOVED}${line}";
            [[ "$line" == "M"* ]] && line="${CMODIFIED}${line}";
            [[ "$line" == "!"* ]] && line="${CMISSING}${line}";
            [[ "$line" == "?"* ]] && line="${CUNTRACKED}${line}";
            HG_FILES_CHANGED="${HG_FILES_CHANGED}
                        ${line}${CNORM}"
        done <<< $(hg status ${@:2});
        HG_STATUS="${HG_FILES_CHANGED_HELP}

            ${HG_FILES_CHANGED}
        ";
    fi

    # Print:
    echo -ne "
${CHEAD}Current branch:${CNORM}         ${hg_branch}


${CHEAD}Applied patch:${CNORM}          ${CPATCH}${hq_qseries}${CNORM}
${current_patch_stats}


${CHEAD}HG Status (modifications not saved to patch file):${CNORM}

${HG_STATUS}
    ";
    echo
}

mq_wiggle() { #-- Find and attempt to resolve failed hunks of an applied patch using wiggle.
    check_hg_repo;
    find . -type f -name "*.rej" -print0 | while IFS= read -r -d '' rej_file; do
        wiggle_rejects "${rej_file}"
    done
}

mq_version() { #-- Output version and copyright information.
    echo -ne "${CHEAD}Version:${CNORM}    $VERSION";
    echo
    echo -ne "${CHEAD}License:${CNORM}";
    while read -r line; do
        [[ "$line" == *"/bin/bash"* ]] && continue;
        [[ "$line" == *"########"* ]] && continue;
        #[[ "$line" == "#" ]] && continue;
        line=$(echo "$line" | sed -r 's/[#]+/ /g');
        echo "    $line";
    done <<< $(head -n 21 "${BASH_SOURCE[0]}");

}

### Env setup ----------------------------------------------------
mkdir -p ${PATCH_DIR}

### Option processing --------------------------------------------


if [[ $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) == "/etc/bash_completion.d" ]]; then
    # Read this file as bash auto completion
    complete -F mq_bash_auto_complete mq
else
    if [ $# == 0 ] ; then
        main_usage;
        exit 1;
    fi
    if [ ${1} == 'help' ] ; then
        main_usage;
        exit 0;
    fi
    if [[ ${1} == '--install' || ${1} == '--update' || ${1} == '--uninstall' ]]; then
        install ${1};
        exit 0;
    fi

    cmd=$(command_exists ${@})
    if [[ ! ${cmd} ]]; then
        echo "Oops... You entered an unknown command - ${1}"
        echo 
        main_usage;
    else
        ${cmd}
    fi

    exit 0

    if [[ -s ${PATCH_DIR}/${APPLIED_PATCH} ]]; then
        echo "yes"
    fi
fi
